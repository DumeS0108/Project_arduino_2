Sujet 2 - Mini alarme de bureau connecté : 
Jalon 1 : Formaliser le cahier des charges :
---------------------------------------------------------------------------------------------------
Sommaire : 
Diagramme synoptique du système (page 2)
Listes des fonctionnalités (page 3)
Diagramme des cas d’utilisation (page 3)
Listes des exigence (page 4)
Diagramme des exigences (page 5)
---------------------------------------------------------------------------------------------------
1 : Diagramme synoptique du système :
Voici le diagramme des synoptique du système :
(image 1)
---------------------------------------------------------------------------------------------------
2 : Listes des fonctionnalités :
Fonctionnalités principales :
Détection de l’ouverture du tiroir :
    Le système détecte si le tiroir est ouvert ou fermé grâce à un capteur magnétique.
    L’état du tiroir est envoyé à l’Arduino et synchronisé avec le serveur Node.js.
Gestion de l’alarme sonore :
    Un buzzer s’active immédiatement si le tiroir est ouvert alors que l’alarme est armée.
Indication visuelle de l’état de l’alarme :
    Une LED :
        Allumée : lorsque l’alarme est armée.
        Éteinte : lorsque l’alarme est désarmée.
Contrôle via une interface web :
    La visualisation en temps réel de l’état du tiroir (ouvert/fermé).
    Commandes pour :
    Armer l’alarme (activer la sécurité).
    Désarmer l’alarme (désactiver temporairement la sécurité).
Synchronisation des données en temps réel :
    Communication bidirectionnelle entre l’Arduino et le serveur Node.js via une liaison USB :
        Données montantes : État du tiroir envoyé par l’Arduino au serveur.
        Données descendantes : Commandes d’activation/désactivation envoyées par le serveur à l’Arduino.
Hébergement de l’interface web :
    L’interface est hébergée par le serveur Node.js et accessible via un navigateur.
    Requêtes HTTP pour gérer les interactions entre l’utilisateur et l’Arduino.
Fonctionnalités techniques :
    Capteur magnétique : 
        Détecte l’état du tiroir (ouvert/fermé).
        Fournit un signal binaire (0 ou 1) à l’Arduino.
    Gestion de l’alarme :
        Activation automatique du buzzer si l’alarme est armée et que le tiroir est ouvert.
        La LED indique l’état actif/inactif de l’alarme.
    Communication série USB :
        Transfert rapide des données entre l’Arduino et le serveur Node.js.
    Gestion de l’interface utilisateur :
        Contrôle intuitif grâce à des boutons pour activer/désactiver l’alarme.
        Affichage en temps réel de l’état du tiroir pour permettre une gestion proactive.
---------------------------------------------------------------------------------------------------
3 : Diagramme des cas d’utilisation :
Voici le diagramme des cas d'utilisation : 
(image 2 )
---------------------------------------------------------------------------------------------------
4 : Listes des exigences :
1. Exigences fonctionnelles :
    Détection du tiroir :
        Le système doit détecter avec précision l’état du tiroir (ouvert ou fermé) à l’aide d’un capteur magnétique.
    Gestion de l’alarme sonore :
        Le buzzer doit se déclencher immédiatement si le tiroir est ouvert alors que l’alarme est armée.
    Contrôle via une interface web :
        L’utilisateur doit pouvoir :
            Armer l’alarme.
            Désarmer l’alarme.
            Visualiser l’état du tiroir (ouvert/fermé) en temps réel via un navigateur web.
    Indication de l’état de l’alarme :
        Une LED doit indiquer l’état de l’alarme :
            Allumée : lorsque l’alarme est armée.
            Éteinte : lorsque l’alarme est désarmée.
    Synchronisation en temps réel :
        La communication entre l’Arduino et le serveur Node.js doit être fiable et en temps réel, via une liaison série USB.
2. Exigences techniques :
    Capteur magnétique :
        Doit fournir un signal binaire (0 ou 1) pour indiquer l’état du tiroir.
    Buzzer et LED :
        Le buzzer doit être activé ou désactivé par l’Arduino en fonction de l’état de l’alarme et du tiroir.
        La LED doit refléter en permanence l’état actif ou inactif de l’alarme.
    Communication série USB :
        L’Arduino doit transmettre les données du capteur et recevoir les commandes (armer/désarmer) via une liaison série USB fiable.
    Serveur Node.js :
        Le serveur doit :
            Gérer les communications avec l’Arduino via la liaison série.
            Héberger l’interface web et gérer les requêtes HTTP.
            Transmettre les commandes utilisateur (via l’interface web) à l’Arduino.
    Interface web :
        Accessible depuis un navigateur web.
        Intuitive, avec des boutons pour contrôler l’alarme et un indicateur pour l’état du tiroir.
        Doit afficher les données reçues de l’Arduino (état du tiroir, alarme armée/désarmée)
---------------------------------------------------------------------------------------------------
5 Diagramme des exigences :
Voici le diagramme des exigences : 
(image 3)
---------------------------------------------------------------------------------------------------
